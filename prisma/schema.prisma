generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  CNS           Int             @unique
  accounts      Account[]
  sessions      Session[]
  consultas     Consultas[] // Relacionamento com Consultas
  endereco      Endereco[] // Relacionamento com Endereco
  tratamentos   Tratamento[] //Relacionamento com Tratamento 
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Consultas {
  id              String          @id @default(uuid())
  data            DateTime
  endereco        String
  profissional    String          @map("profissionalId")
  queixas         String
  tratamento      String
  tipodeexame     String
  tipo            Consultatype
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String
  usuario         User            @relation(fields: [userId], references: [id]) // Atualizaï¿½?o aqui
  profissionalRef Profissional    @relation(fields: [profissional], references: [id])
  unidadeId       String?
  unidade         UnidadeDeSaude? @relation(fields: [unidadeId], references: [id])
}

enum Consultatype {
  Rotina
  Exame
  Emergencia
}

model Endereco {
  id        String   @id @default(uuid())
  CEP       String
  numero    Int
  rua       String
  bairro    String
  municipio String
  UF        String
  nome      String
  userId    String
  usuario   User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profissional {
  id            String          @id @default(uuid())
  nome          String
  especialidade String
  NumClasse           String          @unique
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?      @updatedAt
  tratamentos   Tratamento[] //Relacionamento com Tratamento 
  consultas     Consultas[] // Relacionamento com Consultas
  unidadeId     String?
  unidade       UnidadeDeSaude? @relation(fields: [unidadeId], references: [id])
}

model Tratamento {
  id           String   @id @default(uuid())
  nome         String
  profissionalId String
  profissional Profissional @relation(fields: [profissionalId], references: [id])
  userId       String
  usuario      User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UnidadeDeSaude {
  id            String         @id @default(uuid())
  nome          String
  endereco      String
  tipo          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  consultas     Consultas[] // Relacionamento com Consultas
  profissionais Profissional[] // Relacionamento com Profissionais
}
